<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Com.MarcusTS.SmartDI</name>
    </assembly>
    <members>
        <member name="T:Com.MarcusTS.SmartDI.IConflictResolution">
            <summary>
            Interface IConflictResolution
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.IConflictResolution.MasterType">
            <summary>
            Gets or sets the type of the master.
            </summary>
            <value>The type of the master.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.IConflictResolution.TypeToCastWithStorageRule">
            <summary>
            Gets or sets the type to cast with storage rule.
            </summary>
            <value>The type to cast with storage rule.</value>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.ConflictResolution">
            <summary>
            Class ConflictResolution.
            Implements the <see cref="T:Com.MarcusTS.SmartDI.IConflictResolution" />
            Implements the <see cref="T:Com.MarcusTS.SmartDI.IConflictResolution" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SmartDI.IConflictResolution" />
            <seealso cref="T:Com.MarcusTS.SmartDI.IConflictResolution" />
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ConflictResolution.MasterType">
            <summary>
            Gets or sets the type of the master.
            </summary>
            <value>The type of the master.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ConflictResolution.TypeToCastWithStorageRule">
            <summary>
            Gets or sets the type to cast with storage rule.
            </summary>
            <value>The type to cast with storage rule.</value>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule">
            <summary>
            Interface IProvideCreatorAndStorageRule
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule.ProvidedCreator">
            <summary>
            Gets or sets the provided creator.
            </summary>
            <value>The provided creator.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule.ProvidedStorageRule">
            <summary>
            Gets or sets the provided storage rule.
            </summary>
            <value>The provided storage rule.</value>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.CreatorAndStorageRule">
            <summary>
            Class CreatorAndStorageRule.
            Implements the <see cref="T:Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule" />
            Implements the <see cref="T:Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule" />
            <seealso cref="T:Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule" />
        </member>
        <member name="M:Com.MarcusTS.SmartDI.CreatorAndStorageRule.#ctor(System.Func{System.Object},Com.MarcusTS.SmartDI.StorageRules)">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SmartDI.CreatorAndStorageRule" /> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="storageRule">The storage rule.</param>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.CreatorAndStorageRule.ProvidedCreator">
            <summary>
            Gets or sets the provided creator.
            </summary>
            <value>The provided creator.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.CreatorAndStorageRule.ProvidedStorageRule">
            <summary>
            Gets or sets the provided storage rule.
            </summary>
            <value>The provided storage rule.</value>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.StorageRules">
            <summary>
            Enum StorageRules
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SmartDI.StorageRules.AnyAccessLevel">
            <summary>
               Default for class management; instantiates but does not store.
            </summary>
            <summary>
            Any access level
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SmartDI.StorageRules.SharedDependencyBetweenInstances">
            <summary>
               Requires one or more companion "parents"; once all shared parents are gone, the stored instance is removed.
            </summary>
            <summary>
            The shared dependency between instances
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SmartDI.StorageRules.GlobalSingleton">
            <summary>
               Is stored once requested, and thereafter remains in memory for the life of the container.
            </summary>
            <summary>
            The global singleton
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SmartDI.StorageRules.DoNotStore">
            <summary>
               The instance is not stored after Resolve.
               In the "any" case, the resolver can ask for AnyAccessLevel and can then resolve as Any, Shared, or Singleton without
               error.
               In this case, the resolver *must* ask for DoNotStore as the requested access level.
               Use this access level if you are 100% certain that you never want to store the type as registered.
            </summary>
            <summary>
            The do not store
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.ISmartDIContainer">
            <summary>
               Interface ISmartDIContainer
               Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:System.IDisposable" />
            <summary>
            Interface ISmartDIContainer
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainer.ContainerObjectIsDisappearing(System.Object)">
            <summary>
               Called by the deriver whenever a class is about to disappear from view. It is better to call this before the
               finalizer, as that can be extremely late. An example would be Xamarin.Forms.ContentPage.OnDisappearing. Other
               views or view models will have to listen to the original page event and then notify about their own demise. If
               this step is skipped, none of the lifecycle protections will occur!
            </summary>
            <param name="containerObj">The container object.</param>
            <summary>
            Containers the object is disappearing.
            </summary>
            <param name="containerObj">The container object.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainer.QualifyingRegistrationsExist``1">
            <summary>
               Determine of a qualifying registration exists for a given type.
               Could be used as a pre-tst before Resolve() if confusion exists as to the safety.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if a qualifying registration exits, else <c>false</c>.</returns>
            <summary>
            Qualifyings the registrations exist.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainer.QualifyingRegistrationsExist(System.Type)">
            <summary>
               Determine of a qualifying registration exists for a given type.
               Could be used as a pre-tst before Resolve() if confusion exists as to the safety.
            </summary>
            <param name="type">The class type that would be instantiated by the qualifying registration.</param>
            <returns><c>true</c> if a qualifying registration exits, else <c>false</c>.</returns>
            <summary>
            Qualifyings the registrations exist.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainer.RegisterTypeContracts(System.Type,System.Collections.Generic.IDictionary{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule})">
            <summary>
               Adds a list of types that the type can be resolved as. Includes creators and storage rules.
            </summary>
            <param name="classT">The class type that owns the contracts.</param>
            <param name="creatorsAndRules">The list of class creators and rules. The creators can be null.</param>
            <summary>
            Registers the type contracts.
            </summary>
            <param name="classT">The class t.</param>
            <param name="creatorsAndRules">The creators and rules.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainer.Resolve(System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Object,System.Func{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules},Com.MarcusTS.SmartDI.IConflictResolution})">
            <summary>
               Creates an instance of a class and stores it according to the requested rules. Only works if you have
               registered each base class first along with any interface they should be available (type-cast) as. See
               <see cref="M:Com.MarcusTS.SmartDI.ISmartDIContainer.RegisterTypeContracts(System.Type,System.Collections.Generic.IDictionary{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule})" /> for details about this.
            </summary>
            <param name="typeRequestedT">
               This is the type that you wish to receive. It is not necessarily the "base" class type. It is more commonly an
               interface implemented by your base class type.
            </param>
            <param name="storageRule">
               This is a *request* for a storage rule, but is subject to strict guidelines:
               * If you ask for "AnyAccessLevel", and there is no other value set in the registration, we will give you an
               unstored local variable.
               * If, when you registered, you set the access level to something like "SharedDependencyBetweenInstances", and
               then here on Resolve ask for "GlobalSingleton", we default to throw with an illegal request.
            </param>
            <param name="boundInstance">
               The "host" or "bound" class that is attached to this instance. Only required if you need a
               "SharedDependencyBetweenInstances".
            </param>
            <param name="conflictResolver">
               This is an advanced parameter where you can include a function to "break the tie" when this container tries to
               Resolve, but comes up with more than one competing resolution contract. If you leave this at null, and we
               cannot see a single legal choice, we will throw an error.
            </param>
            <returns>An object which *must* then be cast as the type requested by the *caller*.</returns>
            <summary>
            Resolves the specified type requested t.
            </summary>
            <param name="typeRequestedT">The type requested t.</param>
            <param name="storageRule">The storage rule.</param>
            <param name="boundInstance">The bound instance.</param>
            <param name="conflictResolver">The conflict resolver.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainer.UnregisterTypeContracts``1(System.Type[])">
            <summary>
               Removes a list of types that the parent type can be resolved as. Includes creators and storage rules.
            </summary>
            <typeparam name="TParent">The generic parent type</typeparam>
            <param name="typesToUnregister">The types to remove.</param>
            <summary>
            Unregisters the type contracts.
            </summary>
            <typeparam name="TParent">The type of the t parent.</typeparam>
            <param name="typesToUnregister">The types to unregister.</param>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.SmartDIContainer">
            <summary>
               Class SmartDIContainer.
               Implements the <see cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
               Implements the <see cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            <summary>
            Class SmartDIContainer.
            Implements the <see cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.#ctor(System.Boolean,System.Boolean)">
            <summary>
               Initializes a new instance of the <see cref="T:Com.MarcusTS.SmartDI.SmartDIContainer" /> class.
            </summary>
            <param name="throwOnMultipleRegisteredTypesForOneResolvedType">
               if set to <c>true</c> [throw on multiple registered
               types for one resolved type].
            </param>
            <param name="throwOnAttemptToAssignDuplicateContractSubType">
               if set to <c>true</c> [throw on attempt to assign
               duplicate contract sub type].
            </param>
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SmartDI.SmartDIContainer"/> class.
            </summary>
            <param name="throwOnMultipleRegisteredTypesForOneResolvedType">if set to <c>true</c> [throw on multiple registered types for one resolved type].</param>
            <param name="throwOnAttemptToAssignDuplicateContractSubType">if set to <c>true</c> [throw on attempt to assign duplicate contract sub type].</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.Finalize">
            <summary>
               Finalizes an instance of the <see cref="T:Com.MarcusTS.SmartDI.SmartDIContainer" /> class.
            </summary>
            <summary>
            Finalizes an instance of the <see cref="T:Com.MarcusTS.SmartDI.SmartDIContainer"/> class.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SmartDI.SmartDIContainer._globalSingletonsByType">
            <summary>
               A dictionary of global singletons keyed by type. There can only be one each of a given type.
            </summary>
            <summary>
            The global singletons by type
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SmartDI.SmartDIContainer._registeredTypeContracts">
            <summary>
               Specifies that a type can be resolved as a specific type (can be different as long as
               related) Also sets the storage rules. Defaults to "all".
            </summary>
            <summary>
            The registered type contracts
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SmartDI.SmartDIContainer._sharedInstancesWithBoundMembers">
            <summary>
               A dictionary of instances that are shared between one ore more other instances. When the list of shared
               instances reaches zero, the main instance is removed.
            </summary>
            <summary>
            The shared instances with bound members
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainer.IsArgumentExceptionThrown">
            <summary>
               Gets the is argument exception thrown.
            </summary>
            <value>The is argument exception thrown.</value>
            <summary>
            Gets the is argument exception thrown.
            </summary>
            <value>The is argument exception thrown.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainer.IsOperationExceptionThrown">
            <summary>
               Gets the is operation exception thrown.
            </summary>
            <value>The is operation exception thrown.</value>
            <summary>
            Gets the is operation exception thrown.
            </summary>
            <value>The is operation exception thrown.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainer.IsUnitTesting">
            <summary>
               Gets or sets a value indicating whether this instance is unit testing.
            </summary>
            <value><c>true</c> if this instance is unit testing, else <c>false</c>.</value>
            <summary>
            Gets or sets a value indicating whether this instance is unit testing.
            </summary>
            <value><c>true</c> if this instance is unit testing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainer.ThrowOnAttemptToAssignDuplicateContractSubType">
            <summary>
               If a user registers a contract like this: _container.RegisterType{SimpleClass}(StorageRules.DoNotStore, null,
               false, typeof(IAmSimple)); _container.RegisterType{SimpleClass}(StorageRules.GlobalSingleton, null, false,
               typeof(IAmSimple)); ... we have to save the second registration on top of the first one. Only one sub-type can
               exist with a single storage level. With this Boolean set to false (default), we will casually over-write the
               most recent entry on top of the old entry. With the value set to True, we will throw an error upon over-writing
               any existing registration.
            </summary>
            <value><c>true</c> if [throw on attempt to assign duplicate contract sub type], else <c>false</c>.</value>
            <summary>
            Gets or sets a value indicating whether [throw on attempt to assign duplicate contract sub type].
            </summary>
            <value><c>true</c> if [throw on attempt to assign duplicate contract sub type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainer.ThrowOnMultipleRegisteredTypesForOneResolvedType">
            <summary>
               Registrations occur for base class types. They are usually delivered as interface types. We expect that when
               you register an interface for Resolve, you will only have one interface for a given base class type.
               So in this  example:
               RegisterType(Class1, Interface1)
               You would not also create:
               RegisterType(Class2, Interface1)
               This is considered to be unsafe because it is not clear or purposeful, and the container cannot make a refined
               judgment with any known rules.
               If this Boolean is set to True, we will throw an error if we come across such a condition.
               To avoid the error, leave the Boolean at false, where it defaults.
               With the setting false, we will  just pick the first available candidate.
               THIS IS SLOPPY... so try to set this Boolean to True and make careful registrations.
            </summary>
            <value><c>true</c> if [throw on multiple registered types for one resolved type], else <c>false</c>.</value>
            <summary>
            Gets or sets a value indicating whether [throw on multiple registered types for one resolved type].
            </summary>
            <value><c>true</c> if [throw on multiple registered types for one resolved type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.ContainerObjectIsDisappearing(System.Object)">
            <summary>
               Called by the deriver whenever a class is about to disappear from view. It is better to call this before the
               finalizer, as that can be extremely late. An example would be Xamarin.Forms.ContentPage.OnDisappearing. Other
               views or view models will have to listen to the original page event and then notify about their own demise. If
               this step is skipped, none of the lifecycle protections will occur!
            </summary>
            <param name="containerObj">A variable that was inserted into the container "live" and is now being deactivated.</param>
            <summary>
            Called by the deriver whenever a class is about to disappear from view. It is better to call this before the
            finalizer, as that can be extremely late. An example would be Xamarin.Forms.ContentPage.OnDisappearing. Other
            views or view models will have to listen to the original page event and then notify about their own demise. If
            this step is skipped, none of the lifecycle protections will occur!
            </summary>
            <param name="containerObj">The container object.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.Dispose">
            <summary>
               Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.QualifyingRegistrationsExist``1">
            <summary>
               Determine of a qualifying registration exists for a given type.
               Could be used as a pre-tst before Resolve() if confusion exists as to the safety.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if a qualifying registration exits, else <c>false</c>.</returns>
            <summary>
            Determine of a qualifying registration exists for a given type.
            Could be used as a pre-tst before Resolve() if confusion exists as to the safety.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><c>true</c> if a qualifying registration exits, else <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.QualifyingRegistrationsExist(System.Type)">
            <summary>
               Determine of a qualifying registration exists for a given type.
               Could be used as a pre-tst before Resolve() if confusion exists as to the safety.
            </summary>
            <param name="type">The class type that would be instantiated by the qualifying registration.</param>
            <returns><c>true</c> if a qualifying registration exits, else <c>false</c>.</returns>
            <summary>
            Determine of a qualifying registration exists for a given type.
            Could be used as a pre-tst before Resolve() if confusion exists as to the safety.
            </summary>
            <param name="type">The class type that would be instantiated by the qualifying registration.</param>
            <returns><c>true</c> if a qualifying registration exits, else <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.RegisterTypeContracts(System.Type,System.Collections.Generic.IDictionary{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule})">
            <summary>
               Adds a list of types that the type can be resolved as. Includes creators and storage rules.
            </summary>
            <param name="classT">The base type for the class rule.</param>
            <param name="creatorsAndRules">The list of class creators and rules. The creators can be null.</param>
            <summary>
            Adds a list of types that the type can be resolved as. Includes creators and storage rules.
            </summary>
            <param name="classT">The class type that owns the contracts.</param>
            <param name="creatorsAndRules">The list of class creators and rules. The creators can be null.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.Resolve(System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Object,System.Func{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules},Com.MarcusTS.SmartDI.IConflictResolution})">
            <summary>
               Fetches an object of the requested type.
               If the object does not exist, creates it.
               In certain cases, stores the object.
            </summary>
            <param name="typeRequestedT">The type to cast the object as.  NOTE that the programmer does this after their Resolve.</param>
            <param name="ruleRequested">The sort of storage rule to use in managing the resolved object.</param>
            <param name="boundParent">
               If the storage rule is <see cref="F:Com.MarcusTS.SmartDI.StorageRules.SharedDependencyBetweenInstances" />,
               this is the object that will share the resolved object with other peers.
            </param>
            <param name="conflictResolver">
               If supplied, determines which competing resolution will be returned for the type
               requested.
            </param>
            <returns>System.Object.</returns>
            <summary>
            Resolves the specified type requested t.
            </summary>
            <param name="typeRequestedT">The type requested t.</param>
            <param name="ruleRequested">The rule requested.</param>
            <param name="boundParent">The bound parent.</param>
            <param name="conflictResolver">The conflict resolver.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.UnregisterTypeContracts``1(System.Type[])">
            <summary>
               Removes a list of types that the parent type can be resolved as. Includes creators and storage rules.
            </summary>
            <typeparam name="TParent">The generic parent type</typeparam>
            <param name="typesToUnregister">The types to remove.</param>
            <summary>
            Removes a list of types that the parent type can be resolved as. Includes creators and storage rules.
            </summary>
            <typeparam name="TParent">The generic parent type</typeparam>
            <param name="typesToUnregister">The types to remove.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.ClearExceptions">
            <summary>
            Clears the exceptions.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.CreateSharedInstances(System.Object,System.Type,System.Object[])">
            <summary>
            Adds a list of bound instances to a single shared instance.
            </summary>
            <param name="sharedInstance">The shared instance.</param>
            <param name="sharedInstanceType">The type of the object. The shared instance is often just an object without a final
            type.</param>
            <param name="boundParents">The bound member. Each of these are a different "parent" to the same shared instance.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.CreateSingletonInstance(System.Object,System.Type)">
            <summary>
            Adds a key-value pair with a class type and an instance of that class.
            </summary>
            <param name="instance">The instance of the type.</param>
            <param name="typeToSaveAs">The keyed type for storage.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
            unmanaged resources.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.ReleaseUnmanagedResources">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.RemoveBoundSharedDependencies(System.Object)">
            <summary>
            Removes a bound instance from all shared instances. Also cleans up any orphaned shared instances.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.RemoveSharedInstance``1(``0)">
            <summary>
            If the type exists as a shared instance, removes it. Only used if this shared instance is about to go out of view.
            </summary>
            <typeparam name="ObjectT">The type of the object t.</typeparam>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.RemoveSingletonInstance``1(``0)">
            <summary>
            Removes a global instance as long as it is the same type and reference.
            </summary>
            <typeparam name="ObjectT">The type of the object t.</typeparam>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.ResetContainer">
            <summary>
            Clears all internal lists and exceptions.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.CreateCompleteMessage(System.String,System.String)">
            <summary>
            Creates the complete message.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="message">The message.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.CannotFindObviousChoice(System.Type,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules},System.Collections.Generic.KeyValuePair{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule}@)">
            <summary>
            Looks for a valid registration as the "best choice" for the current conditions.
            </summary>
            <param name="typeRequestedT">The type requested t.</param>
            <param name="registrations">The registrations.</param>
            <param name="resolutionToSeek">The resolution to seek.</param>
            <returns><c>true</c> if a valid registration is found, else <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.CannotResolveConflicts(System.Func{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules},Com.MarcusTS.SmartDI.IConflictResolution},System.Collections.Concurrent.ConcurrentDictionary{System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules},System.Type@,System.Collections.Generic.KeyValuePair{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule}@)">
            <summary>
            Attempts to resolve conlicts, if they exist.
            </summary>
            <param name="conflictResolver">The conflict resolver.</param>
            <param name="qualifyingRegistrations">The qualifying registrations.</param>
            <param name="qualifyingMasterType">Type of the qualifying master.</param>
            <param name="resolutionToSeek">The resolution to seek.</param>
            <returns><c>true</c> if all conflicts have been resolved, else <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.CouldNotCreateObject(System.Type,System.Object@)">
            <summary>
            Tries to create an object and reports the result.
            </summary>
            <param name="qualifyingMasterType">Type of the qualifying master.</param>
            <param name="instantiatedObject">The instantiated object.</param>
            <returns><c>true</c> if object was created successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.GetQualifyingRegistrations(System.Type)">
            <summary>
            Gets the qualifying registrations.
            </summary>
            <param name="typeRequestedT">The type requested t.</param>
            <returns>ConcurrentDictionary&lt;Type, ITimeStampedCreatorAndStorageRules&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.ProvidedCreatorFailed(System.Collections.Generic.KeyValuePair{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule},System.Type,System.Object@)">
            <summary>
            Attempts to use the provided instance creator, if available, and reports the result.
            </summary>
            <param name="resolutionToSeek">The resolution to seek.</param>
            <param name="finalTypeRequestedT">The final type requested t.</param>
            <param name="instantiatedObject">The instantiated object.</param>
            <returns><c>true</c> if a provided creator exists but failed to instantiate an object, else <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.SeekExistingContract(System.Type,System.Collections.Generic.IDictionary{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule})">
            <summary>
            Seeks the existing contract.
            </summary>
            <param name="classT">The class t.</param>
            <param name="creatorsAndRules">The creators and rules.</param>
            <returns>ITimeStampedCreatorAndStorageRules.</returns>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.ThrowArgumentException(System.String,System.String)">
            <summary>
            Throws the argument exception.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainer.ThrowOperationException(System.String,System.String)">
            <summary>
            Throws the operation exception.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting">
            <summary>
            Interface ISmartDIContainerForUnitTesting
            Implements the <see cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            Implements the <see cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainer" />
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.ExposedGlobalSingletons">
            <summary>
            Gets the exposed global singletons.
            </summary>
            <value>The exposed global singletons.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.ExposedRegisteredTypeContracts">
            <summary>
            Gets the exposed registered type contracts.
            </summary>
            <value>The exposed registered type contracts.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.ExposedSharedInstancesWithBoundMembers">
            <summary>
            Gets the exposed shared instances with bound members.
            </summary>
            <value>The exposed shared instances with bound members.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.ExposedThrowOnAttemptToAssignDuplicateContractSubType">
            <summary>
            Gets or sets a value indicating whether [exposed throw on attempt to assign duplicate contract sub type].
            </summary>
            <value><c>true</c> if [exposed throw on attempt to assign duplicate contract sub type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.ExposedThrowOnMultipleRegisteredTypesForOneResolvedType">
            <summary>
            Gets or sets a value indicating whether [exposed throw on multiple registered types for one resolved type].
            </summary>
            <value><c>true</c> if [exposed throw on multiple registered types for one resolved type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.IsArgumentException">
            <summary>
            Gets the is argument exception.
            </summary>
            <value>The is argument exception.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.IsOperationException">
            <summary>
            Gets the is operation exception.
            </summary>
            <value>The is operation exception.</value>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.ClearUnitTestExceptions">
            <summary>
            Clears the unit test exceptions.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting.ResetUnitTestContainer">
            <summary>
            Resets the unit test container.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting">
            <summary>
            Class SmartDIContainerForUnitTesting.
            Implements the <see cref="T:Com.MarcusTS.SmartDI.SmartDIContainer" />
            Implements the <see cref="T:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting" />
            Implements the <see cref="T:Com.MarcusTS.SmartDI.SmartDIContainer" />
            Implements the <see cref="T:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SmartDI.SmartDIContainer" />
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting" />
            <seealso cref="T:Com.MarcusTS.SmartDI.SmartDIContainer" />
            <seealso cref="T:Com.MarcusTS.SmartDI.ISmartDIContainerForUnitTesting" />
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting" /> class.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.ExposedGlobalSingletons">
            <summary>
            Gets the exposed global singletons.
            </summary>
            <value>The exposed global singletons.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.ExposedRegisteredTypeContracts">
            <summary>
            Gets the exposed registered type contracts.
            </summary>
            <value>The exposed registered type contracts.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.ExposedSharedInstancesWithBoundMembers">
            <summary>
            Gets the exposed shared instances with bound members.
            </summary>
            <value>The exposed shared instances with bound members.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.ExposedThrowOnAttemptToAssignDuplicateContractSubType">
            <summary>
            Gets or sets a value indicating whether [exposed throw on attempt to assign duplicate contract sub type].
            </summary>
            <value><c>true</c> if [exposed throw on attempt to assign duplicate contract sub type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.ExposedThrowOnMultipleRegisteredTypesForOneResolvedType">
            <summary>
            Gets or sets a value indicating whether [exposed throw on multiple registered types for one resolved type].
            </summary>
            <value><c>true</c> if [exposed throw on multiple registered types for one resolved type]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.IsArgumentException">
            <summary>
            Gets the is argument exception.
            </summary>
            <value>The is argument exception.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.IsOperationException">
            <summary>
            Gets the is operation exception.
            </summary>
            <value>The is operation exception.</value>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.ClearUnitTestExceptions">
            <summary>
            Clears the unit test exceptions.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIContainerForUnitTesting.ResetUnitTestContainer">
            <summary>
            Resets the unit test container.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.SmartDIExtensions">
            <summary>
            Class SmartDIExtensions.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.AddOrUpdate(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules},System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules)">
            <summary>
            Adds the or update.
            </summary>
            <param name="retDict">The ret dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterSoloType(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object})">
            <summary>
            Another easy-access call to <see cref="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterType(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object},System.Boolean,System.Type[])" />.
            </summary>
            <param name="diContainer">The di container.</param>
            <param name="classType">Type of the class.</param>
            <param name="storageRule">The storage rule.</param>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterSoloType``1(Com.MarcusTS.SmartDI.ISmartDIContainer,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object})">
            <summary>
            The same as <see cref="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterType(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object},System.Boolean,System.Type[])" />, but with hyper-simplified parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="diContainer">The di container.</param>
            <param name="storageRule">The storage rule.</param>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterType(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object},System.Boolean,System.Type[])">
            <summary>
            Registers a base type so that it can be resolved in the future.
            Most of the parameters are optional. If omitted, we make the exact class type
            available for a call to Resolve(), but do not allow other forms of access.
            To Resolve() and convert to an interface, add those to typesToCastAs.
            You can also call the base method, which is wide open but must be
            managed carefully.
            </summary>
            <param name="diContainer">The DI container -- omitted when you call this method, as it is an extension.</param>
            <param name="classType">The base class type that will be constructed. *Must* be a concrete class.</param>
            <param name="storageRule">Determines if a strict rule will be enforced about how the new instance of the class will be stored upon Resolve():
            * AnyAccessLevel: The default; allows the caller to Resolve to determine the way the instance will be stored.
            * DoNotStore: A new instance of the variable will be issued, but it will *not* be stored.
            This is typical where you just need a view model for a view, and there is no reason to maintain it globally.
            If the view model contains data, however, and if it might be required elsewhere in the app, then this will
            cause you to have isolated instances that have separate states. So in that case, it is not recommended.
            You should use the SharedDependencyBetweenInstances in that case.
            * SharedDependencyBetweenInstances: The container will issue an instance and also store it.
            It will be shared with any requester. This *requires* that you supply your host ("bound") class,
            as there is no other way to manage the relationship between that host and this new instance.
            For example, if you bind a view model to a view, the host is the view and the resolved instance is the view model.
            In the same scenario, the view might belong to a page, so the host would be the page
            and the resolved instance will be the view.
            Because it is a shared instance, it cannot be considered "private".  If that is required, use an DoNotStore.
            As soon as all of the bound hosts are disposed, this instance will also be automatically removed from the container.
            * GlobalSingleton: Creates only one instance of the requested type and stores it globally *forever* as long as the
            container is alive.
            Can be used for service injection. Almost never used for any other purpose.</param>
            <param name="creator">A function for creating the class type, if any.
            You do not need to cast as the final type.  The container handles that for you.</param>
            <param name="addMainTypeAsDefault">Optional, and defaulted to false.  Often, DI containers are asked to create these sorts of instances:
            * Cat as IAnimal
            * Dog as IAnimal
            * Bird as IAnimal
            In all three cases, you might pass this as the creator: "() =&gt; new Cat()" or dog or bird, etc.
            We would then typecast the resulting instance as IAnimal for you.
            However, you might do something entirely different:
            * MyClass as ImplementedInterface
            In which case, your creator might be: "() =&gt; new MyClass()".  We would resolve this as ImplementedInterface.
            But what if you also wanted to resolve like this: "Resolve{BaseClass}();" ???
            You would turn this boolean parameter to True.
            Your registration would be:  RegisterType(BaseClass, creator: () =&gt; new BaseClass, addMainAsDefault =
            true,typesToCastAs = typeof(ImplementedInterface).
            After that, you can resolve as either BaseClass or ImplementedInterface.</param>
            <param name="typesToCastAs">The list of types to type-cast the constructed base class as.
            It can be any number. Remember to use "typeof(your type)" for each type, separated by a comma.
            The storage rule for each of these types is the same as the main one you pass in.
            The creator will also be the same for all of these types.
            To create more complex storage rules and creators, call the main library's
            <see cref="M:Com.MarcusTS.SmartDI.SmartDIContainer.RegisterTypeContracts(System.Type,System.Collections.Generic.IDictionary{System.Type,Com.MarcusTS.SmartDI.IProvideCreatorAndStorageRule})" />.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterType``1(Com.MarcusTS.SmartDI.ISmartDIContainer,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object},System.Boolean,System.Type[])">
            <summary>
            The same as <see cref="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterType(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object},System.Boolean,System.Type[])" />, except with a more Generic way to state the base class type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="diContainer">The di container.</param>
            <param name="storageRule">The storage rule.</param>
            <param name="creator">The creator.</param>
            <param name="addMainTypeAsDefault">if set to <c>true</c> [add main type as default].</param>
            <param name="typesToCastAs">The types to cast as.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterTypeAsInterface(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object})">
            <summary>
            Another easy-access call to <see cref="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterType(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object},System.Boolean,System.Type[])" />.
            </summary>
            <param name="diContainer">The di container.</param>
            <param name="classType">Type of the class.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="storageRule">The storage rule.</param>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterTypeAsInterface``1(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object})">
            <summary>
            The same as <see cref="M:Com.MarcusTS.SmartDI.SmartDIExtensions.RegisterType(Com.MarcusTS.SmartDI.ISmartDIContainer,System.Type,Com.MarcusTS.SmartDI.StorageRules,System.Func{System.Object},System.Boolean,System.Type[])" />, but with hyper-simplified parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="diContainer">The di container.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="storageRule">The storage rule.</param>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:Com.MarcusTS.SmartDI.SmartDIExtensions.Resolve``1(Com.MarcusTS.SmartDI.ISmartDIContainer,Com.MarcusTS.SmartDI.StorageRules,System.Object,System.Func{System.Collections.Generic.IDictionary{System.Type,Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules},Com.MarcusTS.SmartDI.IConflictResolution})">
            <summary>
            Provides a generic argument for the type to resolve.
            Casts as the requested type upon return.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="diContainer">The di container.</param>
            <param name="storageRule">The storage rule.</param>
            <param name="boundInstance">The bound instance.</param>
            <param name="conflictResolver">The conflict resolver.</param>
            <returns>T.</returns>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules">
            <summary>
            Interface ITimeStampedCreatorAndStorageRules
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules.CreatorsAndStorageRules">
            <summary>
            Gets or sets the creators and storage rules.
            </summary>
            <value>The creators and storage rules.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules.WhenAdded">
            <summary>
            Gets or sets the when added.
            </summary>
            <value>The when added.</value>
        </member>
        <member name="T:Com.MarcusTS.SmartDI.TimeStampedCreatorAndStorageRules">
            <summary>
            Class TimeStampedCreatorAndStorageRules.
            Implements the <see cref="T:Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules" />
            Implements the <see cref="T:Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules" />
            <seealso cref="T:Com.MarcusTS.SmartDI.ITimeStampedCreatorAndStorageRules" />
        </member>
        <member name="P:Com.MarcusTS.SmartDI.TimeStampedCreatorAndStorageRules.CreatorsAndStorageRules">
            <summary>
            Gets or sets the creators and storage rules.
            </summary>
            <value>The creators and storage rules.</value>
        </member>
        <member name="P:Com.MarcusTS.SmartDI.TimeStampedCreatorAndStorageRules.WhenAdded">
            <summary>
            Gets or sets the when added.
            </summary>
            <value>The when added.</value>
        </member>
    </members>
</doc>
